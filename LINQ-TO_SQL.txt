System.Data.Linq  Package

using System.Data.Linq;
using System.Data.Linq.Mapping;

[Table(Name = "Customers")]
public class Customer
{
private string _CustomerID;
[Column(IsPrimaryKey=true, Storage="_CustomerID")]
public string CustomerID
{
    get
    {
        return this._CustomerID;
    }
    set
    {
        this._CustomerID = value;
    }

}

private string _City;
[Column(Storage="_City")]
public string City
{
    get
    {
        return this._City;
    }
    set
    {
        this._City=value;
    }
}

    }

}
}


// Use a connection string.
DataContext db = new DataContext
    (@"c:\linqtest5\northwnd.mdf");

// Get a typed table to run queries.
Table<Customer> Customers = db.GetTable<Customer>();


// Attach the log to show generated SQL.
db.Log = Console.Out;

// Query for customers in London.
IQueryable<Customer> custQuery =
    from cust in Customers
    where cust.City == "London" 
    select cust;


foreach (Customer cust in custQuery)
{
    Console.WriteLine("ID={0}, City={1}", cust.CustomerID,
        cust.City);
}

// Prevent console window from closing.
Console.ReadLine();




Mapping Relationships Across Tables
[Table(Name = "Orders")]
public class Order
{
    private int _OrderID = 0;
    private string _CustomerID;
    private EntityRef<Customer> _Customer;
    public Order() { this._Customer = new EntityRef<Customer>(); }

    [Column(Storage = "_OrderID", DbType = "Int NOT NULL IDENTITY",
    IsPrimaryKey = true, IsDbGenerated = true)]
    public int OrderID
    {
        get { return this._OrderID; }
        // No need to specify a setter because IsDBGenerated is 
        // true.
    }

    [Column(Storage = "_CustomerID", DbType = "NChar(5)")]
    public string CustomerID
    {
        get { return this._CustomerID; }
        set { this._CustomerID = value; }
    }

    [Association(Storage = "_Customer", ThisKey = "CustomerID")]
    public Customer Customer
    {
        get { return this._Customer.Entity; }
        set { this._Customer.Entity = value; }
    }
}



Type or paste the following code into the Customer class:
private EntitySet<Order> _Orders;
public Customer()
{
    this._Orders = new EntitySet<Order>();
}

[Association(Storage = "_Orders", OtherKey = "CustomerID")]
public EntitySet<Order> Orders
{
    get { return this._Orders; }
    set { this._Orders.Assign(value); }
}



Creating and Running a Query Across the Customer-Order Relationship

// Query for customers who have placed orders. 
var custQuery = 
    from cust in Customers
    where cust.Orders.Any()
    select cust;

foreach (var custObj in custQuery)
{
    Console.WriteLine("ID={0}, Qty={1}", custObj.CustomerID,
        custObj.Orders.Count);
}

To strongly type the DataContext object

public class Northwind : DataContext
{
    // Table<T> abstracts database details per table/data type. 
    public Table<Customer> Customers;
    public Table<Order> Orders;

    public Northwind(string connection) : base(connection) { }
}

// Use a connection string.
Northwind db = new Northwind(@"C:\linqtest5\northwnd.mdf");

// Query for customers from Seattle.  
var custQuery =
    from cust in db.Customers
    where cust.City == "Seattle" 
    select cust;

foreach (var custObj in custQuery)
{
    Console.WriteLine("ID={0}", custObj.CustomerID);
}
// Freeze the console window.
Console.ReadLine();



Creating

// Use the following connection string.
Northwnd db = new Northwnd(@"c:\linqtest6\northwnd.mdf");

// Create the new Customer object.
Customer newCust = new Customer();
newCust.CompanyName = "AdventureWorks Cafe";
newCust.CustomerID = "ADVCA";

// Add the customer to the Customers table.
db.Customers.InsertOnSubmit(newCust);

Console.WriteLine("\nCustomers matching CA before insert");

foreach (var c in db.Customers.Where(cust => cust.CustomerID.Contains("CA")))
{
    Console.WriteLine("{0}, {1}, {2}",
        c.CustomerID, c.CompanyName, c.Orders.Count);
}

Updating an Entity

// Query for specific customer. 
// First() returns one object rather than a collection. 
var existingCust =
    (from c in db.Customers
     where c.CustomerID == "ALFKI" 
     select c)
    .First();

// Change the contact name of the customer.
existingCust.ContactName = "New Contact";


Deleting an Entity

// Access the first element in the Orders collection.
Order ord0 = existingCust.Orders[0];

// Access the first element in the OrderDetails collection.
OrderDetail detail0 = ord0.OrderDetails[0];

// Display the order to be deleted.
Console.WriteLine
    ("The Order Detail to be deleted is: OrderID = {0}, ProductID = {1}",
    detail0.OrderID, detail0.ProductID);

// Mark the Order Detail row for deletion from the database.
db.OrderDetails.DeleteOnSubmit(detail0);

db.SubmitChanges();


Console.WriteLine("\nCustomers matching CA after update");
foreach (var c in db.Customers.Where(cust =>
    cust.CustomerID.Contains("CA")))
{
    Console.WriteLine("{0}, {1}, {2}",
        c.CustomerID, c.CompanyName, c.Orders.Count);
}

// Keep the console window open after activity stops.
Console.ReadLine();


